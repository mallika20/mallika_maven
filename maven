Candy.java
package com.dileep.epam;
public class Candy extends Sweets{
Candy(String name,int cost,float weight,int sweetcontent){
super(name,cost,weight,sweetcontent);
}
}
-------------------------------------------------------------------
Chocolate.java
package com.dileep.epam;
public class Chocolate extends Sweets{
Chocolate(String name,int cost,float weight,int sweetcontent){
super(name,cost,weight,sweetcontent);
}
}
--------------------------------------------------------------------------
--
JellyBeans.java
package com.dileep.epam;
public class JellyBeans extends Sweets{
JellyBeans(String name,int cost,float weight,int sweetcontent){
super(name,cost,weight,sweetcontent);
}
}
--------------------------------------------------------------------------
--------------
NewYearGift.java
package com.dileep.epam;
import java.util.ArrayList;
import java.util.*;
public class NewYearGift{
public static void main(String[] args){
Scanner sc = new Scanner(System.in);
List<Sweets> ls = new ArrayList<>();
ls.add(new Chocolate("DairyMilk",50,20.5f,60));
ls.add(new Chocolate("MilkyBar",20,10.2f,40));
ls.add(new Chocolate("FiveStar",30,21.5f,55));
ls.add(new Chocolate("KitKat",60,30.2f,65));
ls.add(new JellyBeans("JustJelly",5,5.1f,45));
ls.add(new JellyBeans("JollyRancher",10,5.1f,50));
ls.add(new JellyBeans("JellyBelly",15,7.5f,65));
ls .add(new Candy("Hershey's_Kisses",60,8.1f,90));
ls.add(new Candy("LaffyTaffy",90,30.1f,75));
ls.add(new Candy("Nerds",10,2.6f,10));
ls.add(new Candy("MilkyWay",30,15.6f,25));
ls.add(new Candy("DoubleBubbleGum",5,3.0f,15));
List<Sweets> choco = new ArrayList<>();
float totalWeight = 0;
for(Sweets s: ls)
totalWeight+=s.weight;
System.out.println("\nTotal Weight of the Gift is :
"+totalWeight);
for(Sweets s: ls){
if(s instanceof Chocolate)
choco.add(s);
}
System.out.println("\nLet's get to sorting......\n");
System.out.println("Enter your choice to sort based on :\n");
System.out.println("1.Cost\n2.Weight\n3.SweetContent\n");
int op = sc.nextInt();
if(op == 1)Collections.sort(choco,new sortByCost());
else if(op == 2)Collections.sort(choco,new sortByWeight());
else Collections.sort(choco,new sortBySweetContent());
System.out.println("Chocolates Present in the Gift are:");
for(Sweets s:choco){
System.out.println(s.name+" "+s.cost+"
"+s.weight+" "+s.sweetContent);
}
System.out.println("Do you Want List of Candies(y/n)");
char c=sc.next().charAt(0);
if(c=='y'){
System.out.print("Enter the Option
:\n1.Cost\n2.Weight\n3.SweetContent\n");
op=sc.nextInt();
System.out.println("Enter the Range");
int min=sc.nextInt();
int max=sc.nextInt();
if(op==1) {
for(Sweets cur:ls) {
if(cur instanceof Candy &&
cur.cost>=min && cur.cost<=max){
System.out.println(cur.name+" "+cur.cost+" "+cur.weight+"
"+cur.sweetContent);
}
}
}
else if(op==2) {
for(Sweets cur:ls) {
if(cur instanceof Candy &&
cur.weight>=min && cur.weight<=max){
System.out.println(cur.name+" "+cur.cost+" "+cur.weight+"
"+cur.sweetContent);
}
}
}
else {
for(Sweets cur:ls) {
if(cur instanceof Candy &&
cur.sweetContent>=min && cur.sweetContent<=max){
System.out.println(cur.name+" "+cur.cost+" "+cur.weight+"
"+cur.sweetContent);
}
}
}
}
sc.close();
}
}
--------------------------------------------------------------------------
-----------------------------
Sweets.java
package com.dileep.epam;
import java.util.*;
class sortByCost implements Comparator<Sweets>{
@Override
public int compare(Sweets s1, Sweets s2) {
return s1.cost-s2.cost;
}
}
class sortByWeight implements Comparator<Sweets>{
@Override
public int compare(Sweets s1, Sweets s2) {
return Float.compare(s1.weight,s2.weight);
}
}
class sortBySweetContent implements Comparator<Sweets>{
@Override
public int compare(Sweets s1, Sweets s2) {
return s1.sweetContent-s2.sweetContent;
}
}
class Sweets{
String name;
int cost;
float weight;
int sweetContent;
Sweets(String name,int cost,float weight,int sweetContent){
this.name = name;
this.cost = cost;
this.weight = weight;
this.sweetContent = sweetContent;
}
}
--------------------------------------------------------------------------
-------------------
.classpath
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
<classpathentry kind="src" output="target/classes"
path="src/main/java">
<attributes>
<attribute name="optional" value="true"/>
<attribute name="maven.pomderived"
value="true"/>
</attributes>
</classpathentry>
<classpathentry kind="src" output="target/test-classes"
path="src/test/java">
<attributes>
<attribute name="optional" value="true"/>
<attribute name="maven.pomderived"
value="true"/>
<attribute name="test" value="true"/>
</attributes>
</classpathentry>
<classpathentry kind="con"
path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.deb
ug.ui.launcher.StandardVMType/JavaSE-1.7">
<attributes>
<attribute name="maven.pomderived"
value="true"/>
</attributes>
</classpathentry>
<classpathentry kind="con"
path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
<attributes>
<attribute name="maven.pomderived"
value="true"/>
</attributes>
</classpathentry>
<classpathentry kind="output" path="target/classes"/>
</classpath>
--------------------------------------------------------------------------
--------------------
.project
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
<name>epam</name>
<comment></comment>
<projects>
</projects>
<buildSpec>
<buildCommand>
<name>org.eclipse.jdt.core.javabuilder</name>
<arguments>
</arguments>
</buildCommand>
<buildCommand>
<name>org.eclipse.m2e.core.maven2Builder</name>
<arguments>
</arguments>
</buildCommand>
</buildSpec>
<natures>
<nature>org.eclipse.jdt.core.javanature</nature>
<nature>org.eclipse.m2e.core.maven2Nature</nature>
</natures>
</projectDescription>
--------------------------------------------------------------------------
---------------------
pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
http://maven.apache.org/xsd/maven-4.0.0.xsd">
<modelVersion>4.0.0</modelVersion>
<groupId>com.dileep</groupId>
<artifactId>epam</artifactId>
<version>0.0.1-SNAPSHOT</version>
<name>epam</name>
<!-- FIXME change it to the project's website -->
<url>http://www.example.com</url>
<properties>
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<maven.compiler.source>1.7</maven.compiler.source>
<maven.compiler.target>1.7</maven.compiler.target>
</properties>
<dependencies>
<dependency>
<groupId>junit</groupId>
<artifactId>junit</artifactId>
<version>4.11</version>
<scope>test</scope>
</dependency>
</dependencies>
<build>
<pluginManagement><!-- lock down plugins versions to avoid using Maven
defaults (may be moved to parent pom) -->
<plugins>
<!-- clean lifecycle, see
https://maven.apache.org/ref/current/mavencore/lifecycles.html#clean_Lifecycle -->
<plugin>
<artifactId>maven-clean-plugin</artifactId>
<version>3.1.0</version>
</plugin>
<!-- default lifecycle, jar packaging: see
https://maven.apache.org/ref/current/maven-core/defaultbindings.html#Plugin_bindings_for_jar_packaging -->
<plugin>
<artifactId>maven-resources-plugin</artifactId>
<version>3.0.2</version>
</plugin>
<plugin>
<artifactId>maven-compiler-plugin</artifactId>
<version>3.8.0</version>
</plugin>
<plugin>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.22.1</version>
</plugin>
<plugin>
<artifactId>maven-jar-plugin</artifactId>
<version>3.0.2</version>
</plugin>
<plugin>
<artifactId>maven-install-plugin</artifactId>
<version>2.5.2</version>
</plugin>
<plugin>
<artifactId>maven-deploy-plugin</artifactId>
<version>2.8.2</version>
</plugin>
<!-- site lifecycle, see
https://maven.apache.org/ref/current/mavencore/lifecycles.html#site_Lifecycle -->
<plugin>
<artifactId>maven-site-plugin</artifactId>
<version>3.7.1</version>
</plugin>
<plugin>
<artifactId>maven-project-info-reports-plugin</artifactId>
<version>3.0.0</version>
</plugin>
</plugins>
</pluginManagement>
</build>
</project>
